// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
	"github.com/satont/twitch-notifier/ent/chat"
	"github.com/satont/twitch-notifier/ent/follow"
)

// Follow is the model entity for the Follow schema.
type Follow struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID uuid.UUID `json:"channel_id,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID uuid.UUID `json:"chat_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FollowQuery when eager-loading is set.
	Edges FollowEdges `json:"edges"`
}

// FollowEdges holds the relations/edges for other nodes in the graph.
type FollowEdges struct {
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// Chat holds the value of the chat edge.
	Chat *Chat `json:"chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[0] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowEdges) ChatOrErr() (*Chat, error) {
	if e.loadedTypes[1] {
		if e.Chat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.Chat, nil
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Follow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case follow.FieldID, follow.FieldChannelID, follow.FieldChatID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Follow", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Follow fields.
func (f *Follow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case follow.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case follow.FieldChannelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value != nil {
				f.ChannelID = *value
			}
		case follow.FieldChatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value != nil {
				f.ChatID = *value
			}
		}
	}
	return nil
}

// QueryChannel queries the "channel" edge of the Follow entity.
func (f *Follow) QueryChannel() *ChannelQuery {
	return NewFollowClient(f.config).QueryChannel(f)
}

// QueryChat queries the "chat" edge of the Follow entity.
func (f *Follow) QueryChat() *ChatQuery {
	return NewFollowClient(f.config).QueryChat(f)
}

// Update returns a builder for updating this Follow.
// Note that you need to call Follow.Unwrap() before calling this method if this Follow
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Follow) Update() *FollowUpdateOne {
	return NewFollowClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Follow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Follow) Unwrap() *Follow {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Follow is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Follow) String() string {
	var builder strings.Builder
	builder.WriteString("Follow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ChatID))
	builder.WriteByte(')')
	return builder.String()
}

// Follows is a parsable slice of Follow.
type Follows []*Follow
