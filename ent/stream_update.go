// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
	"github.com/satont/twitch-notifier/ent/predicate"
	"github.com/satont/twitch-notifier/ent/stream"
)

// StreamUpdate is the builder for updating Stream entities.
type StreamUpdate struct {
	config
	hooks    []Hook
	mutation *StreamMutation
}

// Where appends a list predicates to the StreamUpdate builder.
func (su *StreamUpdate) Where(ps ...predicate.Stream) *StreamUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetChannelID sets the "channel_id" field.
func (su *StreamUpdate) SetChannelID(u uuid.UUID) *StreamUpdate {
	su.mutation.SetChannelID(u)
	return su
}

// SetTitles sets the "titles" field.
func (su *StreamUpdate) SetTitles(s []string) *StreamUpdate {
	su.mutation.SetTitles(s)
	return su
}

// AppendTitles appends s to the "titles" field.
func (su *StreamUpdate) AppendTitles(s []string) *StreamUpdate {
	su.mutation.AppendTitles(s)
	return su
}

// ClearTitles clears the value of the "titles" field.
func (su *StreamUpdate) ClearTitles() *StreamUpdate {
	su.mutation.ClearTitles()
	return su
}

// SetCategories sets the "categories" field.
func (su *StreamUpdate) SetCategories(s []string) *StreamUpdate {
	su.mutation.SetCategories(s)
	return su
}

// AppendCategories appends s to the "categories" field.
func (su *StreamUpdate) AppendCategories(s []string) *StreamUpdate {
	su.mutation.AppendCategories(s)
	return su
}

// ClearCategories clears the value of the "categories" field.
func (su *StreamUpdate) ClearCategories() *StreamUpdate {
	su.mutation.ClearCategories()
	return su
}

// SetStartedAt sets the "started_at" field.
func (su *StreamUpdate) SetStartedAt(t time.Time) *StreamUpdate {
	su.mutation.SetStartedAt(t)
	return su
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (su *StreamUpdate) SetNillableStartedAt(t *time.Time) *StreamUpdate {
	if t != nil {
		su.SetStartedAt(*t)
	}
	return su
}

// ClearStartedAt clears the value of the "started_at" field.
func (su *StreamUpdate) ClearStartedAt() *StreamUpdate {
	su.mutation.ClearStartedAt()
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StreamUpdate) SetUpdatedAt(t time.Time) *StreamUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *StreamUpdate) ClearUpdatedAt() *StreamUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetEndedAt sets the "ended_at" field.
func (su *StreamUpdate) SetEndedAt(t time.Time) *StreamUpdate {
	su.mutation.SetEndedAt(t)
	return su
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (su *StreamUpdate) SetNillableEndedAt(t *time.Time) *StreamUpdate {
	if t != nil {
		su.SetEndedAt(*t)
	}
	return su
}

// ClearEndedAt clears the value of the "ended_at" field.
func (su *StreamUpdate) ClearEndedAt() *StreamUpdate {
	su.mutation.ClearEndedAt()
	return su
}

// SetChannel sets the "channel" edge to the Channel entity.
func (su *StreamUpdate) SetChannel(c *Channel) *StreamUpdate {
	return su.SetChannelID(c.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (su *StreamUpdate) Mutation() *StreamMutation {
	return su.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (su *StreamUpdate) ClearChannel() *StreamUpdate {
	su.mutation.ClearChannel()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StreamUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, StreamMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StreamUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StreamUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StreamUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StreamUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		v := stream.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StreamUpdate) check() error {
	if _, ok := su.mutation.ChannelID(); su.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stream.channel"`)
	}
	return nil
}

func (su *StreamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stream.Table, stream.Columns, sqlgraph.NewFieldSpec(stream.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Titles(); ok {
		_spec.SetField(stream.FieldTitles, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTitles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, stream.FieldTitles, value)
		})
	}
	if su.mutation.TitlesCleared() {
		_spec.ClearField(stream.FieldTitles, field.TypeJSON)
	}
	if value, ok := su.mutation.Categories(); ok {
		_spec.SetField(stream.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, stream.FieldCategories, value)
		})
	}
	if su.mutation.CategoriesCleared() {
		_spec.ClearField(stream.FieldCategories, field.TypeJSON)
	}
	if value, ok := su.mutation.StartedAt(); ok {
		_spec.SetField(stream.FieldStartedAt, field.TypeTime, value)
	}
	if su.mutation.StartedAtCleared() {
		_spec.ClearField(stream.FieldStartedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(stream.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(stream.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.EndedAt(); ok {
		_spec.SetField(stream.FieldEndedAt, field.TypeTime, value)
	}
	if su.mutation.EndedAtCleared() {
		_spec.ClearField(stream.FieldEndedAt, field.TypeTime)
	}
	if su.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.ChannelTable,
			Columns: []string{stream.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.ChannelTable,
			Columns: []string{stream.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StreamUpdateOne is the builder for updating a single Stream entity.
type StreamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StreamMutation
}

// SetChannelID sets the "channel_id" field.
func (suo *StreamUpdateOne) SetChannelID(u uuid.UUID) *StreamUpdateOne {
	suo.mutation.SetChannelID(u)
	return suo
}

// SetTitles sets the "titles" field.
func (suo *StreamUpdateOne) SetTitles(s []string) *StreamUpdateOne {
	suo.mutation.SetTitles(s)
	return suo
}

// AppendTitles appends s to the "titles" field.
func (suo *StreamUpdateOne) AppendTitles(s []string) *StreamUpdateOne {
	suo.mutation.AppendTitles(s)
	return suo
}

// ClearTitles clears the value of the "titles" field.
func (suo *StreamUpdateOne) ClearTitles() *StreamUpdateOne {
	suo.mutation.ClearTitles()
	return suo
}

// SetCategories sets the "categories" field.
func (suo *StreamUpdateOne) SetCategories(s []string) *StreamUpdateOne {
	suo.mutation.SetCategories(s)
	return suo
}

// AppendCategories appends s to the "categories" field.
func (suo *StreamUpdateOne) AppendCategories(s []string) *StreamUpdateOne {
	suo.mutation.AppendCategories(s)
	return suo
}

// ClearCategories clears the value of the "categories" field.
func (suo *StreamUpdateOne) ClearCategories() *StreamUpdateOne {
	suo.mutation.ClearCategories()
	return suo
}

// SetStartedAt sets the "started_at" field.
func (suo *StreamUpdateOne) SetStartedAt(t time.Time) *StreamUpdateOne {
	suo.mutation.SetStartedAt(t)
	return suo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableStartedAt(t *time.Time) *StreamUpdateOne {
	if t != nil {
		suo.SetStartedAt(*t)
	}
	return suo
}

// ClearStartedAt clears the value of the "started_at" field.
func (suo *StreamUpdateOne) ClearStartedAt() *StreamUpdateOne {
	suo.mutation.ClearStartedAt()
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StreamUpdateOne) SetUpdatedAt(t time.Time) *StreamUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *StreamUpdateOne) ClearUpdatedAt() *StreamUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetEndedAt sets the "ended_at" field.
func (suo *StreamUpdateOne) SetEndedAt(t time.Time) *StreamUpdateOne {
	suo.mutation.SetEndedAt(t)
	return suo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (suo *StreamUpdateOne) SetNillableEndedAt(t *time.Time) *StreamUpdateOne {
	if t != nil {
		suo.SetEndedAt(*t)
	}
	return suo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (suo *StreamUpdateOne) ClearEndedAt() *StreamUpdateOne {
	suo.mutation.ClearEndedAt()
	return suo
}

// SetChannel sets the "channel" edge to the Channel entity.
func (suo *StreamUpdateOne) SetChannel(c *Channel) *StreamUpdateOne {
	return suo.SetChannelID(c.ID)
}

// Mutation returns the StreamMutation object of the builder.
func (suo *StreamUpdateOne) Mutation() *StreamMutation {
	return suo.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (suo *StreamUpdateOne) ClearChannel() *StreamUpdateOne {
	suo.mutation.ClearChannel()
	return suo
}

// Where appends a list predicates to the StreamUpdate builder.
func (suo *StreamUpdateOne) Where(ps ...predicate.Stream) *StreamUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StreamUpdateOne) Select(field string, fields ...string) *StreamUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stream entity.
func (suo *StreamUpdateOne) Save(ctx context.Context) (*Stream, error) {
	suo.defaults()
	return withHooks[*Stream, StreamMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StreamUpdateOne) SaveX(ctx context.Context) *Stream {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StreamUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StreamUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StreamUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		v := stream.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StreamUpdateOne) check() error {
	if _, ok := suo.mutation.ChannelID(); suo.mutation.ChannelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Stream.channel"`)
	}
	return nil
}

func (suo *StreamUpdateOne) sqlSave(ctx context.Context) (_node *Stream, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stream.Table, stream.Columns, sqlgraph.NewFieldSpec(stream.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stream.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stream.FieldID)
		for _, f := range fields {
			if !stream.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stream.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Titles(); ok {
		_spec.SetField(stream.FieldTitles, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTitles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, stream.FieldTitles, value)
		})
	}
	if suo.mutation.TitlesCleared() {
		_spec.ClearField(stream.FieldTitles, field.TypeJSON)
	}
	if value, ok := suo.mutation.Categories(); ok {
		_spec.SetField(stream.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, stream.FieldCategories, value)
		})
	}
	if suo.mutation.CategoriesCleared() {
		_spec.ClearField(stream.FieldCategories, field.TypeJSON)
	}
	if value, ok := suo.mutation.StartedAt(); ok {
		_spec.SetField(stream.FieldStartedAt, field.TypeTime, value)
	}
	if suo.mutation.StartedAtCleared() {
		_spec.ClearField(stream.FieldStartedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(stream.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(stream.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.EndedAt(); ok {
		_spec.SetField(stream.FieldEndedAt, field.TypeTime, value)
	}
	if suo.mutation.EndedAtCleared() {
		_spec.ClearField(stream.FieldEndedAt, field.TypeTime)
	}
	if suo.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.ChannelTable,
			Columns: []string{stream.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stream.ChannelTable,
			Columns: []string{stream.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stream{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stream.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
