// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
	"github.com/satont/twitch-notifier/ent/chat"
	"github.com/satont/twitch-notifier/ent/chatsettings"
	"github.com/satont/twitch-notifier/ent/follow"
	"github.com/satont/twitch-notifier/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChannel      = "Channel"
	TypeChat         = "Chat"
	TypeChatSettings = "ChatSettings"
	TypeFollow       = "Follow"
)

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	channel_id     *string
	service        *channel.Service
	clearedFields  map[string]struct{}
	follows        map[uuid.UUID]struct{}
	removedfollows map[uuid.UUID]struct{}
	clearedfollows bool
	done           bool
	oldValue       func(context.Context) (*Channel, error)
	predicates     []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uuid.UUID) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChannelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChannelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Channel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel_id" field.
func (m *ChannelMutation) SetChannelID(s string) {
	m.channel_id = &s
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *ChannelMutation) ChannelID() (r string, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldChannelID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *ChannelMutation) ResetChannelID() {
	m.channel_id = nil
}

// SetService sets the "service" field.
func (m *ChannelMutation) SetService(c channel.Service) {
	m.service = &c
}

// Service returns the value of the "service" field in the mutation.
func (m *ChannelMutation) Service() (r channel.Service, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldService(ctx context.Context) (v channel.Service, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *ChannelMutation) ResetService() {
	m.service = nil
}

// AddFollowIDs adds the "follows" edge to the Follow entity by ids.
func (m *ChannelMutation) AddFollowIDs(ids ...uuid.UUID) {
	if m.follows == nil {
		m.follows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.follows[ids[i]] = struct{}{}
	}
}

// ClearFollows clears the "follows" edge to the Follow entity.
func (m *ChannelMutation) ClearFollows() {
	m.clearedfollows = true
}

// FollowsCleared reports if the "follows" edge to the Follow entity was cleared.
func (m *ChannelMutation) FollowsCleared() bool {
	return m.clearedfollows
}

// RemoveFollowIDs removes the "follows" edge to the Follow entity by IDs.
func (m *ChannelMutation) RemoveFollowIDs(ids ...uuid.UUID) {
	if m.removedfollows == nil {
		m.removedfollows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.follows, ids[i])
		m.removedfollows[ids[i]] = struct{}{}
	}
}

// RemovedFollows returns the removed IDs of the "follows" edge to the Follow entity.
func (m *ChannelMutation) RemovedFollowsIDs() (ids []uuid.UUID) {
	for id := range m.removedfollows {
		ids = append(ids, id)
	}
	return
}

// FollowsIDs returns the "follows" edge IDs in the mutation.
func (m *ChannelMutation) FollowsIDs() (ids []uuid.UUID) {
	for id := range m.follows {
		ids = append(ids, id)
	}
	return
}

// ResetFollows resets all changes to the "follows" edge.
func (m *ChannelMutation) ResetFollows() {
	m.follows = nil
	m.clearedfollows = false
	m.removedfollows = nil
}

// Where appends a list predicates to the ChannelMutation builder.
func (m *ChannelMutation) Where(ps ...predicate.Channel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChannelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChannelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Channel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChannelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.channel_id != nil {
		fields = append(fields, channel.FieldChannelID)
	}
	if m.service != nil {
		fields = append(fields, channel.FieldService)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldChannelID:
		return m.ChannelID()
	case channel.FieldService:
		return m.Service()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldChannelID:
		return m.OldChannelID(ctx)
	case channel.FieldService:
		return m.OldService(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldChannelID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case channel.FieldService:
		v, ok := value.(channel.Service)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case channel.FieldService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.follows != nil {
		edges = append(edges, channel.EdgeFollows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.follows))
		for id := range m.follows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedfollows != nil {
		edges = append(edges, channel.EdgeFollows)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.removedfollows))
		for id := range m.removedfollows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedfollows {
		edges = append(edges, channel.EdgeFollows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeFollows:
		return m.clearedfollows
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeFollows:
		m.ResetFollows()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// ChatMutation represents an operation that mutates the Chat nodes in the graph.
type ChatMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	chat_id              *string
	service              *chat.Service
	clearedFields        map[string]struct{}
	chat_settings        *uuid.UUID
	clearedchat_settings bool
	follows              map[uuid.UUID]struct{}
	removedfollows       map[uuid.UUID]struct{}
	clearedfollows       bool
	done                 bool
	oldValue             func(context.Context) (*Chat, error)
	predicates           []predicate.Chat
}

var _ ent.Mutation = (*ChatMutation)(nil)

// chatOption allows management of the mutation configuration using functional options.
type chatOption func(*ChatMutation)

// newChatMutation creates new mutation for the Chat entity.
func newChatMutation(c config, op Op, opts ...chatOption) *ChatMutation {
	m := &ChatMutation{
		config:        c,
		op:            op,
		typ:           TypeChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatID sets the ID field of the mutation.
func withChatID(id uuid.UUID) chatOption {
	return func(m *ChatMutation) {
		var (
			err   error
			once  sync.Once
			value *Chat
		)
		m.oldValue = func(ctx context.Context) (*Chat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChat sets the old Chat of the mutation.
func withChat(node *Chat) chatOption {
	return func(m *ChatMutation) {
		m.oldValue = func(context.Context) (*Chat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chat entities.
func (m *ChatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatMutation) SetChatID(s string) {
	m.chat_id = &s
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatMutation) ChatID() (r string, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldChatID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatMutation) ResetChatID() {
	m.chat_id = nil
}

// SetService sets the "service" field.
func (m *ChatMutation) SetService(c chat.Service) {
	m.service = &c
}

// Service returns the value of the "service" field in the mutation.
func (m *ChatMutation) Service() (r chat.Service, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldService(ctx context.Context) (v chat.Service, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *ChatMutation) ResetService() {
	m.service = nil
}

// SetChatSettingsID sets the "chat_settings" edge to the ChatSettings entity by id.
func (m *ChatMutation) SetChatSettingsID(id uuid.UUID) {
	m.chat_settings = &id
}

// ClearChatSettings clears the "chat_settings" edge to the ChatSettings entity.
func (m *ChatMutation) ClearChatSettings() {
	m.clearedchat_settings = true
}

// ChatSettingsCleared reports if the "chat_settings" edge to the ChatSettings entity was cleared.
func (m *ChatMutation) ChatSettingsCleared() bool {
	return m.clearedchat_settings
}

// ChatSettingsID returns the "chat_settings" edge ID in the mutation.
func (m *ChatMutation) ChatSettingsID() (id uuid.UUID, exists bool) {
	if m.chat_settings != nil {
		return *m.chat_settings, true
	}
	return
}

// ChatSettingsIDs returns the "chat_settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatSettingsID instead. It exists only for internal usage by the builders.
func (m *ChatMutation) ChatSettingsIDs() (ids []uuid.UUID) {
	if id := m.chat_settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChatSettings resets all changes to the "chat_settings" edge.
func (m *ChatMutation) ResetChatSettings() {
	m.chat_settings = nil
	m.clearedchat_settings = false
}

// AddFollowIDs adds the "follows" edge to the Follow entity by ids.
func (m *ChatMutation) AddFollowIDs(ids ...uuid.UUID) {
	if m.follows == nil {
		m.follows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.follows[ids[i]] = struct{}{}
	}
}

// ClearFollows clears the "follows" edge to the Follow entity.
func (m *ChatMutation) ClearFollows() {
	m.clearedfollows = true
}

// FollowsCleared reports if the "follows" edge to the Follow entity was cleared.
func (m *ChatMutation) FollowsCleared() bool {
	return m.clearedfollows
}

// RemoveFollowIDs removes the "follows" edge to the Follow entity by IDs.
func (m *ChatMutation) RemoveFollowIDs(ids ...uuid.UUID) {
	if m.removedfollows == nil {
		m.removedfollows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.follows, ids[i])
		m.removedfollows[ids[i]] = struct{}{}
	}
}

// RemovedFollows returns the removed IDs of the "follows" edge to the Follow entity.
func (m *ChatMutation) RemovedFollowsIDs() (ids []uuid.UUID) {
	for id := range m.removedfollows {
		ids = append(ids, id)
	}
	return
}

// FollowsIDs returns the "follows" edge IDs in the mutation.
func (m *ChatMutation) FollowsIDs() (ids []uuid.UUID) {
	for id := range m.follows {
		ids = append(ids, id)
	}
	return
}

// ResetFollows resets all changes to the "follows" edge.
func (m *ChatMutation) ResetFollows() {
	m.follows = nil
	m.clearedfollows = false
	m.removedfollows = nil
}

// Where appends a list predicates to the ChatMutation builder.
func (m *ChatMutation) Where(ps ...predicate.Chat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chat).
func (m *ChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.chat_id != nil {
		fields = append(fields, chat.FieldChatID)
	}
	if m.service != nil {
		fields = append(fields, chat.FieldService)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldChatID:
		return m.ChatID()
	case chat.FieldService:
		return m.Service()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chat.FieldChatID:
		return m.OldChatID(ctx)
	case chat.FieldService:
		return m.OldService(ctx)
	}
	return nil, fmt.Errorf("unknown Chat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chat.FieldChatID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case chat.FieldService:
		v, ok := value.(chat.Service)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMutation) ResetField(name string) error {
	switch name {
	case chat.FieldChatID:
		m.ResetChatID()
		return nil
	case chat.FieldService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.chat_settings != nil {
		edges = append(edges, chat.EdgeChatSettings)
	}
	if m.follows != nil {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chat.EdgeChatSettings:
		if id := m.chat_settings; id != nil {
			return []ent.Value{*id}
		}
	case chat.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.follows))
		for id := range m.follows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfollows != nil {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chat.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.removedfollows))
		for id := range m.removedfollows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchat_settings {
		edges = append(edges, chat.EdgeChatSettings)
	}
	if m.clearedfollows {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMutation) EdgeCleared(name string) bool {
	switch name {
	case chat.EdgeChatSettings:
		return m.clearedchat_settings
	case chat.EdgeFollows:
		return m.clearedfollows
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMutation) ClearEdge(name string) error {
	switch name {
	case chat.EdgeChatSettings:
		m.ClearChatSettings()
		return nil
	}
	return fmt.Errorf("unknown Chat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMutation) ResetEdge(name string) error {
	switch name {
	case chat.EdgeChatSettings:
		m.ResetChatSettings()
		return nil
	case chat.EdgeFollows:
		m.ResetFollows()
		return nil
	}
	return fmt.Errorf("unknown Chat edge %s", name)
}

// ChatSettingsMutation represents an operation that mutates the ChatSettings nodes in the graph.
type ChatSettingsMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	game_change_notification *bool
	offline_notification     *bool
	chat_language            *chatsettings.ChatLanguage
	clearedFields            map[string]struct{}
	owner                    *uuid.UUID
	clearedowner             bool
	done                     bool
	oldValue                 func(context.Context) (*ChatSettings, error)
	predicates               []predicate.ChatSettings
}

var _ ent.Mutation = (*ChatSettingsMutation)(nil)

// chatsettingsOption allows management of the mutation configuration using functional options.
type chatsettingsOption func(*ChatSettingsMutation)

// newChatSettingsMutation creates new mutation for the ChatSettings entity.
func newChatSettingsMutation(c config, op Op, opts ...chatsettingsOption) *ChatSettingsMutation {
	m := &ChatSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeChatSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatSettingsID sets the ID field of the mutation.
func withChatSettingsID(id uuid.UUID) chatsettingsOption {
	return func(m *ChatSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatSettings
		)
		m.oldValue = func(ctx context.Context) (*ChatSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatSettings sets the old ChatSettings of the mutation.
func withChatSettings(node *ChatSettings) chatsettingsOption {
	return func(m *ChatSettingsMutation) {
		m.oldValue = func(context.Context) (*ChatSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatSettings entities.
func (m *ChatSettingsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatSettingsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatSettingsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGameChangeNotification sets the "game_change_notification" field.
func (m *ChatSettingsMutation) SetGameChangeNotification(b bool) {
	m.game_change_notification = &b
}

// GameChangeNotification returns the value of the "game_change_notification" field in the mutation.
func (m *ChatSettingsMutation) GameChangeNotification() (r bool, exists bool) {
	v := m.game_change_notification
	if v == nil {
		return
	}
	return *v, true
}

// OldGameChangeNotification returns the old "game_change_notification" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldGameChangeNotification(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameChangeNotification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameChangeNotification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameChangeNotification: %w", err)
	}
	return oldValue.GameChangeNotification, nil
}

// ResetGameChangeNotification resets all changes to the "game_change_notification" field.
func (m *ChatSettingsMutation) ResetGameChangeNotification() {
	m.game_change_notification = nil
}

// SetOfflineNotification sets the "offline_notification" field.
func (m *ChatSettingsMutation) SetOfflineNotification(b bool) {
	m.offline_notification = &b
}

// OfflineNotification returns the value of the "offline_notification" field in the mutation.
func (m *ChatSettingsMutation) OfflineNotification() (r bool, exists bool) {
	v := m.offline_notification
	if v == nil {
		return
	}
	return *v, true
}

// OldOfflineNotification returns the old "offline_notification" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldOfflineNotification(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfflineNotification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfflineNotification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfflineNotification: %w", err)
	}
	return oldValue.OfflineNotification, nil
}

// ResetOfflineNotification resets all changes to the "offline_notification" field.
func (m *ChatSettingsMutation) ResetOfflineNotification() {
	m.offline_notification = nil
}

// SetChatLanguage sets the "chat_language" field.
func (m *ChatSettingsMutation) SetChatLanguage(cl chatsettings.ChatLanguage) {
	m.chat_language = &cl
}

// ChatLanguage returns the value of the "chat_language" field in the mutation.
func (m *ChatSettingsMutation) ChatLanguage() (r chatsettings.ChatLanguage, exists bool) {
	v := m.chat_language
	if v == nil {
		return
	}
	return *v, true
}

// OldChatLanguage returns the old "chat_language" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldChatLanguage(ctx context.Context) (v chatsettings.ChatLanguage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatLanguage: %w", err)
	}
	return oldValue.ChatLanguage, nil
}

// ResetChatLanguage resets all changes to the "chat_language" field.
func (m *ChatSettingsMutation) ResetChatLanguage() {
	m.chat_language = nil
}

// SetOwnerID sets the "owner" edge to the Chat entity by id.
func (m *ChatSettingsMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Chat entity.
func (m *ChatSettingsMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Chat entity was cleared.
func (m *ChatSettingsMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *ChatSettingsMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *ChatSettingsMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *ChatSettingsMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the ChatSettingsMutation builder.
func (m *ChatSettingsMutation) Where(ps ...predicate.ChatSettings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatSettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatSettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatSettings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatSettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatSettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatSettings).
func (m *ChatSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatSettingsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.game_change_notification != nil {
		fields = append(fields, chatsettings.FieldGameChangeNotification)
	}
	if m.offline_notification != nil {
		fields = append(fields, chatsettings.FieldOfflineNotification)
	}
	if m.chat_language != nil {
		fields = append(fields, chatsettings.FieldChatLanguage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		return m.GameChangeNotification()
	case chatsettings.FieldOfflineNotification:
		return m.OfflineNotification()
	case chatsettings.FieldChatLanguage:
		return m.ChatLanguage()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		return m.OldGameChangeNotification(ctx)
	case chatsettings.FieldOfflineNotification:
		return m.OldOfflineNotification(ctx)
	case chatsettings.FieldChatLanguage:
		return m.OldChatLanguage(ctx)
	}
	return nil, fmt.Errorf("unknown ChatSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameChangeNotification(v)
		return nil
	case chatsettings.FieldOfflineNotification:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfflineNotification(v)
		return nil
	case chatsettings.FieldChatLanguage:
		v, ok := value.(chatsettings.ChatLanguage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatLanguage(v)
		return nil
	}
	return fmt.Errorf("unknown ChatSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatSettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatSettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatSettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatSettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatSettingsMutation) ResetField(name string) error {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		m.ResetGameChangeNotification()
		return nil
	case chatsettings.FieldOfflineNotification:
		m.ResetOfflineNotification()
		return nil
	case chatsettings.FieldChatLanguage:
		m.ResetChatLanguage()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, chatsettings.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatsettings.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatSettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, chatsettings.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case chatsettings.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatSettingsMutation) ClearEdge(name string) error {
	switch name {
	case chatsettings.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatSettingsMutation) ResetEdge(name string) error {
	switch name {
	case chatsettings.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings edge %s", name)
}

// FollowMutation represents an operation that mutates the Follow nodes in the graph.
type FollowMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	clearedFields  map[string]struct{}
	channel        *uuid.UUID
	clearedchannel bool
	chat           *uuid.UUID
	clearedchat    bool
	done           bool
	oldValue       func(context.Context) (*Follow, error)
	predicates     []predicate.Follow
}

var _ ent.Mutation = (*FollowMutation)(nil)

// followOption allows management of the mutation configuration using functional options.
type followOption func(*FollowMutation)

// newFollowMutation creates new mutation for the Follow entity.
func newFollowMutation(c config, op Op, opts ...followOption) *FollowMutation {
	m := &FollowMutation{
		config:        c,
		op:            op,
		typ:           TypeFollow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFollowID sets the ID field of the mutation.
func withFollowID(id uuid.UUID) followOption {
	return func(m *FollowMutation) {
		var (
			err   error
			once  sync.Once
			value *Follow
		)
		m.oldValue = func(ctx context.Context) (*Follow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Follow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFollow sets the old Follow of the mutation.
func withFollow(node *Follow) followOption {
	return func(m *FollowMutation) {
		m.oldValue = func(context.Context) (*Follow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FollowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FollowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Follow entities.
func (m *FollowMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FollowMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FollowMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Follow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *FollowMutation) SetChannelID(id uuid.UUID) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *FollowMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *FollowMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *FollowMutation) ChannelID() (id uuid.UUID, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *FollowMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *FollowMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// SetChatID sets the "chat" edge to the Chat entity by id.
func (m *FollowMutation) SetChatID(id uuid.UUID) {
	m.chat = &id
}

// ClearChat clears the "chat" edge to the Chat entity.
func (m *FollowMutation) ClearChat() {
	m.clearedchat = true
}

// ChatCleared reports if the "chat" edge to the Chat entity was cleared.
func (m *FollowMutation) ChatCleared() bool {
	return m.clearedchat
}

// ChatID returns the "chat" edge ID in the mutation.
func (m *FollowMutation) ChatID() (id uuid.UUID, exists bool) {
	if m.chat != nil {
		return *m.chat, true
	}
	return
}

// ChatIDs returns the "chat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatID instead. It exists only for internal usage by the builders.
func (m *FollowMutation) ChatIDs() (ids []uuid.UUID) {
	if id := m.chat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChat resets all changes to the "chat" edge.
func (m *FollowMutation) ResetChat() {
	m.chat = nil
	m.clearedchat = false
}

// Where appends a list predicates to the FollowMutation builder.
func (m *FollowMutation) Where(ps ...predicate.Follow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FollowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FollowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Follow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FollowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FollowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Follow).
func (m *FollowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FollowMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FollowMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FollowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Follow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Follow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FollowMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FollowMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Follow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FollowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FollowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FollowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Follow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FollowMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Follow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FollowMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.channel != nil {
		edges = append(edges, follow.EdgeChannel)
	}
	if m.chat != nil {
		edges = append(edges, follow.EdgeChat)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FollowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case follow.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case follow.EdgeChat:
		if id := m.chat; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FollowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FollowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FollowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchannel {
		edges = append(edges, follow.EdgeChannel)
	}
	if m.clearedchat {
		edges = append(edges, follow.EdgeChat)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FollowMutation) EdgeCleared(name string) bool {
	switch name {
	case follow.EdgeChannel:
		return m.clearedchannel
	case follow.EdgeChat:
		return m.clearedchat
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FollowMutation) ClearEdge(name string) error {
	switch name {
	case follow.EdgeChannel:
		m.ClearChannel()
		return nil
	case follow.EdgeChat:
		m.ClearChat()
		return nil
	}
	return fmt.Errorf("unknown Follow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FollowMutation) ResetEdge(name string) error {
	switch name {
	case follow.EdgeChannel:
		m.ResetChannel()
		return nil
	case follow.EdgeChat:
		m.ResetChat()
		return nil
	}
	return fmt.Errorf("unknown Follow edge %s", name)
}
