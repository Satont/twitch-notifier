// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
	"github.com/satont/twitch-notifier/ent/chat"
	"github.com/satont/twitch-notifier/ent/chatsettings"
	"github.com/satont/twitch-notifier/ent/follow"
	"github.com/satont/twitch-notifier/ent/predicate"
	"github.com/satont/twitch-notifier/ent/stream"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChannel      = "Channel"
	TypeChat         = "Chat"
	TypeChatSettings = "ChatSettings"
	TypeFollow       = "Follow"
	TypeStream       = "Stream"
)

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	channel_id     *string
	service        *channel.Service
	is_live        *bool
	title          *string
	category       *string
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	follows        map[uuid.UUID]struct{}
	removedfollows map[uuid.UUID]struct{}
	clearedfollows bool
	streams        map[string]struct{}
	removedstreams map[string]struct{}
	clearedstreams bool
	done           bool
	oldValue       func(context.Context) (*Channel, error)
	predicates     []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uuid.UUID) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChannelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChannelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Channel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel_id" field.
func (m *ChannelMutation) SetChannelID(s string) {
	m.channel_id = &s
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *ChannelMutation) ChannelID() (r string, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldChannelID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *ChannelMutation) ResetChannelID() {
	m.channel_id = nil
}

// SetService sets the "service" field.
func (m *ChannelMutation) SetService(c channel.Service) {
	m.service = &c
}

// Service returns the value of the "service" field in the mutation.
func (m *ChannelMutation) Service() (r channel.Service, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldService(ctx context.Context) (v channel.Service, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *ChannelMutation) ResetService() {
	m.service = nil
}

// SetIsLive sets the "is_live" field.
func (m *ChannelMutation) SetIsLive(b bool) {
	m.is_live = &b
}

// IsLive returns the value of the "is_live" field in the mutation.
func (m *ChannelMutation) IsLive() (r bool, exists bool) {
	v := m.is_live
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLive returns the old "is_live" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldIsLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLive: %w", err)
	}
	return oldValue.IsLive, nil
}

// ResetIsLive resets all changes to the "is_live" field.
func (m *ChannelMutation) ResetIsLive() {
	m.is_live = nil
}

// SetTitle sets the "title" field.
func (m *ChannelMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ChannelMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldTitle(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ChannelMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[channel.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ChannelMutation) TitleCleared() bool {
	_, ok := m.clearedFields[channel.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ChannelMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, channel.FieldTitle)
}

// SetCategory sets the "category" field.
func (m *ChannelMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *ChannelMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldCategory(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *ChannelMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[channel.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *ChannelMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[channel.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *ChannelMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, channel.FieldCategory)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChannelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChannelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *ChannelMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[channel.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *ChannelMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[channel.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChannelMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, channel.FieldUpdatedAt)
}

// AddFollowIDs adds the "follows" edge to the Follow entity by ids.
func (m *ChannelMutation) AddFollowIDs(ids ...uuid.UUID) {
	if m.follows == nil {
		m.follows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.follows[ids[i]] = struct{}{}
	}
}

// ClearFollows clears the "follows" edge to the Follow entity.
func (m *ChannelMutation) ClearFollows() {
	m.clearedfollows = true
}

// FollowsCleared reports if the "follows" edge to the Follow entity was cleared.
func (m *ChannelMutation) FollowsCleared() bool {
	return m.clearedfollows
}

// RemoveFollowIDs removes the "follows" edge to the Follow entity by IDs.
func (m *ChannelMutation) RemoveFollowIDs(ids ...uuid.UUID) {
	if m.removedfollows == nil {
		m.removedfollows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.follows, ids[i])
		m.removedfollows[ids[i]] = struct{}{}
	}
}

// RemovedFollows returns the removed IDs of the "follows" edge to the Follow entity.
func (m *ChannelMutation) RemovedFollowsIDs() (ids []uuid.UUID) {
	for id := range m.removedfollows {
		ids = append(ids, id)
	}
	return
}

// FollowsIDs returns the "follows" edge IDs in the mutation.
func (m *ChannelMutation) FollowsIDs() (ids []uuid.UUID) {
	for id := range m.follows {
		ids = append(ids, id)
	}
	return
}

// ResetFollows resets all changes to the "follows" edge.
func (m *ChannelMutation) ResetFollows() {
	m.follows = nil
	m.clearedfollows = false
	m.removedfollows = nil
}

// AddStreamIDs adds the "streams" edge to the Stream entity by ids.
func (m *ChannelMutation) AddStreamIDs(ids ...string) {
	if m.streams == nil {
		m.streams = make(map[string]struct{})
	}
	for i := range ids {
		m.streams[ids[i]] = struct{}{}
	}
}

// ClearStreams clears the "streams" edge to the Stream entity.
func (m *ChannelMutation) ClearStreams() {
	m.clearedstreams = true
}

// StreamsCleared reports if the "streams" edge to the Stream entity was cleared.
func (m *ChannelMutation) StreamsCleared() bool {
	return m.clearedstreams
}

// RemoveStreamIDs removes the "streams" edge to the Stream entity by IDs.
func (m *ChannelMutation) RemoveStreamIDs(ids ...string) {
	if m.removedstreams == nil {
		m.removedstreams = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.streams, ids[i])
		m.removedstreams[ids[i]] = struct{}{}
	}
}

// RemovedStreams returns the removed IDs of the "streams" edge to the Stream entity.
func (m *ChannelMutation) RemovedStreamsIDs() (ids []string) {
	for id := range m.removedstreams {
		ids = append(ids, id)
	}
	return
}

// StreamsIDs returns the "streams" edge IDs in the mutation.
func (m *ChannelMutation) StreamsIDs() (ids []string) {
	for id := range m.streams {
		ids = append(ids, id)
	}
	return
}

// ResetStreams resets all changes to the "streams" edge.
func (m *ChannelMutation) ResetStreams() {
	m.streams = nil
	m.clearedstreams = false
	m.removedstreams = nil
}

// Where appends a list predicates to the ChannelMutation builder.
func (m *ChannelMutation) Where(ps ...predicate.Channel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChannelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChannelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Channel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChannelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.channel_id != nil {
		fields = append(fields, channel.FieldChannelID)
	}
	if m.service != nil {
		fields = append(fields, channel.FieldService)
	}
	if m.is_live != nil {
		fields = append(fields, channel.FieldIsLive)
	}
	if m.title != nil {
		fields = append(fields, channel.FieldTitle)
	}
	if m.category != nil {
		fields = append(fields, channel.FieldCategory)
	}
	if m.updated_at != nil {
		fields = append(fields, channel.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldChannelID:
		return m.ChannelID()
	case channel.FieldService:
		return m.Service()
	case channel.FieldIsLive:
		return m.IsLive()
	case channel.FieldTitle:
		return m.Title()
	case channel.FieldCategory:
		return m.Category()
	case channel.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldChannelID:
		return m.OldChannelID(ctx)
	case channel.FieldService:
		return m.OldService(ctx)
	case channel.FieldIsLive:
		return m.OldIsLive(ctx)
	case channel.FieldTitle:
		return m.OldTitle(ctx)
	case channel.FieldCategory:
		return m.OldCategory(ctx)
	case channel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldChannelID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case channel.FieldService:
		v, ok := value.(channel.Service)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	case channel.FieldIsLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLive(v)
		return nil
	case channel.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case channel.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case channel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(channel.FieldTitle) {
		fields = append(fields, channel.FieldTitle)
	}
	if m.FieldCleared(channel.FieldCategory) {
		fields = append(fields, channel.FieldCategory)
	}
	if m.FieldCleared(channel.FieldUpdatedAt) {
		fields = append(fields, channel.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	switch name {
	case channel.FieldTitle:
		m.ClearTitle()
		return nil
	case channel.FieldCategory:
		m.ClearCategory()
		return nil
	case channel.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldChannelID:
		m.ResetChannelID()
		return nil
	case channel.FieldService:
		m.ResetService()
		return nil
	case channel.FieldIsLive:
		m.ResetIsLive()
		return nil
	case channel.FieldTitle:
		m.ResetTitle()
		return nil
	case channel.FieldCategory:
		m.ResetCategory()
		return nil
	case channel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.follows != nil {
		edges = append(edges, channel.EdgeFollows)
	}
	if m.streams != nil {
		edges = append(edges, channel.EdgeStreams)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.follows))
		for id := range m.follows {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeStreams:
		ids := make([]ent.Value, 0, len(m.streams))
		for id := range m.streams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfollows != nil {
		edges = append(edges, channel.EdgeFollows)
	}
	if m.removedstreams != nil {
		edges = append(edges, channel.EdgeStreams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.removedfollows))
		for id := range m.removedfollows {
			ids = append(ids, id)
		}
		return ids
	case channel.EdgeStreams:
		ids := make([]ent.Value, 0, len(m.removedstreams))
		for id := range m.removedstreams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfollows {
		edges = append(edges, channel.EdgeFollows)
	}
	if m.clearedstreams {
		edges = append(edges, channel.EdgeStreams)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeFollows:
		return m.clearedfollows
	case channel.EdgeStreams:
		return m.clearedstreams
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeFollows:
		m.ResetFollows()
		return nil
	case channel.EdgeStreams:
		m.ResetStreams()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// ChatMutation represents an operation that mutates the Chat nodes in the graph.
type ChatMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	chat_id         *string
	service         *chat.Service
	clearedFields   map[string]struct{}
	settings        *uuid.UUID
	clearedsettings bool
	follows         map[uuid.UUID]struct{}
	removedfollows  map[uuid.UUID]struct{}
	clearedfollows  bool
	done            bool
	oldValue        func(context.Context) (*Chat, error)
	predicates      []predicate.Chat
}

var _ ent.Mutation = (*ChatMutation)(nil)

// chatOption allows management of the mutation configuration using functional options.
type chatOption func(*ChatMutation)

// newChatMutation creates new mutation for the Chat entity.
func newChatMutation(c config, op Op, opts ...chatOption) *ChatMutation {
	m := &ChatMutation{
		config:        c,
		op:            op,
		typ:           TypeChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatID sets the ID field of the mutation.
func withChatID(id uuid.UUID) chatOption {
	return func(m *ChatMutation) {
		var (
			err   error
			once  sync.Once
			value *Chat
		)
		m.oldValue = func(ctx context.Context) (*Chat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChat sets the old Chat of the mutation.
func withChat(node *Chat) chatOption {
	return func(m *ChatMutation) {
		m.oldValue = func(context.Context) (*Chat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chat entities.
func (m *ChatMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatMutation) SetChatID(s string) {
	m.chat_id = &s
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatMutation) ChatID() (r string, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldChatID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatMutation) ResetChatID() {
	m.chat_id = nil
}

// SetService sets the "service" field.
func (m *ChatMutation) SetService(c chat.Service) {
	m.service = &c
}

// Service returns the value of the "service" field in the mutation.
func (m *ChatMutation) Service() (r chat.Service, exists bool) {
	v := m.service
	if v == nil {
		return
	}
	return *v, true
}

// OldService returns the old "service" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldService(ctx context.Context) (v chat.Service, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldService is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldService requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldService: %w", err)
	}
	return oldValue.Service, nil
}

// ResetService resets all changes to the "service" field.
func (m *ChatMutation) ResetService() {
	m.service = nil
}

// SetSettingsID sets the "settings" edge to the ChatSettings entity by id.
func (m *ChatMutation) SetSettingsID(id uuid.UUID) {
	m.settings = &id
}

// ClearSettings clears the "settings" edge to the ChatSettings entity.
func (m *ChatMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the ChatSettings entity was cleared.
func (m *ChatMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// SettingsID returns the "settings" edge ID in the mutation.
func (m *ChatMutation) SettingsID() (id uuid.UUID, exists bool) {
	if m.settings != nil {
		return *m.settings, true
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingsID instead. It exists only for internal usage by the builders.
func (m *ChatMutation) SettingsIDs() (ids []uuid.UUID) {
	if id := m.settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *ChatMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
}

// AddFollowIDs adds the "follows" edge to the Follow entity by ids.
func (m *ChatMutation) AddFollowIDs(ids ...uuid.UUID) {
	if m.follows == nil {
		m.follows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.follows[ids[i]] = struct{}{}
	}
}

// ClearFollows clears the "follows" edge to the Follow entity.
func (m *ChatMutation) ClearFollows() {
	m.clearedfollows = true
}

// FollowsCleared reports if the "follows" edge to the Follow entity was cleared.
func (m *ChatMutation) FollowsCleared() bool {
	return m.clearedfollows
}

// RemoveFollowIDs removes the "follows" edge to the Follow entity by IDs.
func (m *ChatMutation) RemoveFollowIDs(ids ...uuid.UUID) {
	if m.removedfollows == nil {
		m.removedfollows = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.follows, ids[i])
		m.removedfollows[ids[i]] = struct{}{}
	}
}

// RemovedFollows returns the removed IDs of the "follows" edge to the Follow entity.
func (m *ChatMutation) RemovedFollowsIDs() (ids []uuid.UUID) {
	for id := range m.removedfollows {
		ids = append(ids, id)
	}
	return
}

// FollowsIDs returns the "follows" edge IDs in the mutation.
func (m *ChatMutation) FollowsIDs() (ids []uuid.UUID) {
	for id := range m.follows {
		ids = append(ids, id)
	}
	return
}

// ResetFollows resets all changes to the "follows" edge.
func (m *ChatMutation) ResetFollows() {
	m.follows = nil
	m.clearedfollows = false
	m.removedfollows = nil
}

// Where appends a list predicates to the ChatMutation builder.
func (m *ChatMutation) Where(ps ...predicate.Chat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chat).
func (m *ChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.chat_id != nil {
		fields = append(fields, chat.FieldChatID)
	}
	if m.service != nil {
		fields = append(fields, chat.FieldService)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldChatID:
		return m.ChatID()
	case chat.FieldService:
		return m.Service()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chat.FieldChatID:
		return m.OldChatID(ctx)
	case chat.FieldService:
		return m.OldService(ctx)
	}
	return nil, fmt.Errorf("unknown Chat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chat.FieldChatID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	case chat.FieldService:
		v, ok := value.(chat.Service)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetService(v)
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMutation) ResetField(name string) error {
	switch name {
	case chat.FieldChatID:
		m.ResetChatID()
		return nil
	case chat.FieldService:
		m.ResetService()
		return nil
	}
	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.settings != nil {
		edges = append(edges, chat.EdgeSettings)
	}
	if m.follows != nil {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chat.EdgeSettings:
		if id := m.settings; id != nil {
			return []ent.Value{*id}
		}
	case chat.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.follows))
		for id := range m.follows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfollows != nil {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case chat.EdgeFollows:
		ids := make([]ent.Value, 0, len(m.removedfollows))
		for id := range m.removedfollows {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsettings {
		edges = append(edges, chat.EdgeSettings)
	}
	if m.clearedfollows {
		edges = append(edges, chat.EdgeFollows)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMutation) EdgeCleared(name string) bool {
	switch name {
	case chat.EdgeSettings:
		return m.clearedsettings
	case chat.EdgeFollows:
		return m.clearedfollows
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMutation) ClearEdge(name string) error {
	switch name {
	case chat.EdgeSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown Chat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMutation) ResetEdge(name string) error {
	switch name {
	case chat.EdgeSettings:
		m.ResetSettings()
		return nil
	case chat.EdgeFollows:
		m.ResetFollows()
		return nil
	}
	return fmt.Errorf("unknown Chat edge %s", name)
}

// ChatSettingsMutation represents an operation that mutates the ChatSettings nodes in the graph.
type ChatSettingsMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	game_change_notification *bool
	offline_notification     *bool
	chat_language            *chatsettings.ChatLanguage
	clearedFields            map[string]struct{}
	chat                     *uuid.UUID
	clearedchat              bool
	done                     bool
	oldValue                 func(context.Context) (*ChatSettings, error)
	predicates               []predicate.ChatSettings
}

var _ ent.Mutation = (*ChatSettingsMutation)(nil)

// chatsettingsOption allows management of the mutation configuration using functional options.
type chatsettingsOption func(*ChatSettingsMutation)

// newChatSettingsMutation creates new mutation for the ChatSettings entity.
func newChatSettingsMutation(c config, op Op, opts ...chatsettingsOption) *ChatSettingsMutation {
	m := &ChatSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeChatSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatSettingsID sets the ID field of the mutation.
func withChatSettingsID(id uuid.UUID) chatsettingsOption {
	return func(m *ChatSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatSettings
		)
		m.oldValue = func(ctx context.Context) (*ChatSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatSettings sets the old ChatSettings of the mutation.
func withChatSettings(node *ChatSettings) chatsettingsOption {
	return func(m *ChatSettingsMutation) {
		m.oldValue = func(context.Context) (*ChatSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatSettings entities.
func (m *ChatSettingsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatSettingsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatSettingsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGameChangeNotification sets the "game_change_notification" field.
func (m *ChatSettingsMutation) SetGameChangeNotification(b bool) {
	m.game_change_notification = &b
}

// GameChangeNotification returns the value of the "game_change_notification" field in the mutation.
func (m *ChatSettingsMutation) GameChangeNotification() (r bool, exists bool) {
	v := m.game_change_notification
	if v == nil {
		return
	}
	return *v, true
}

// OldGameChangeNotification returns the old "game_change_notification" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldGameChangeNotification(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameChangeNotification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameChangeNotification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameChangeNotification: %w", err)
	}
	return oldValue.GameChangeNotification, nil
}

// ResetGameChangeNotification resets all changes to the "game_change_notification" field.
func (m *ChatSettingsMutation) ResetGameChangeNotification() {
	m.game_change_notification = nil
}

// SetOfflineNotification sets the "offline_notification" field.
func (m *ChatSettingsMutation) SetOfflineNotification(b bool) {
	m.offline_notification = &b
}

// OfflineNotification returns the value of the "offline_notification" field in the mutation.
func (m *ChatSettingsMutation) OfflineNotification() (r bool, exists bool) {
	v := m.offline_notification
	if v == nil {
		return
	}
	return *v, true
}

// OldOfflineNotification returns the old "offline_notification" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldOfflineNotification(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOfflineNotification is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOfflineNotification requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOfflineNotification: %w", err)
	}
	return oldValue.OfflineNotification, nil
}

// ResetOfflineNotification resets all changes to the "offline_notification" field.
func (m *ChatSettingsMutation) ResetOfflineNotification() {
	m.offline_notification = nil
}

// SetChatLanguage sets the "chat_language" field.
func (m *ChatSettingsMutation) SetChatLanguage(cl chatsettings.ChatLanguage) {
	m.chat_language = &cl
}

// ChatLanguage returns the value of the "chat_language" field in the mutation.
func (m *ChatSettingsMutation) ChatLanguage() (r chatsettings.ChatLanguage, exists bool) {
	v := m.chat_language
	if v == nil {
		return
	}
	return *v, true
}

// OldChatLanguage returns the old "chat_language" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldChatLanguage(ctx context.Context) (v chatsettings.ChatLanguage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatLanguage: %w", err)
	}
	return oldValue.ChatLanguage, nil
}

// ResetChatLanguage resets all changes to the "chat_language" field.
func (m *ChatSettingsMutation) ResetChatLanguage() {
	m.chat_language = nil
}

// SetChatID sets the "chat_id" field.
func (m *ChatSettingsMutation) SetChatID(u uuid.UUID) {
	m.chat = &u
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatSettingsMutation) ChatID() (r uuid.UUID, exists bool) {
	v := m.chat
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the ChatSettings entity.
// If the ChatSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatSettingsMutation) OldChatID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatSettingsMutation) ResetChatID() {
	m.chat = nil
}

// ClearChat clears the "chat" edge to the Chat entity.
func (m *ChatSettingsMutation) ClearChat() {
	m.clearedchat = true
}

// ChatCleared reports if the "chat" edge to the Chat entity was cleared.
func (m *ChatSettingsMutation) ChatCleared() bool {
	return m.clearedchat
}

// ChatIDs returns the "chat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatID instead. It exists only for internal usage by the builders.
func (m *ChatSettingsMutation) ChatIDs() (ids []uuid.UUID) {
	if id := m.chat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChat resets all changes to the "chat" edge.
func (m *ChatSettingsMutation) ResetChat() {
	m.chat = nil
	m.clearedchat = false
}

// Where appends a list predicates to the ChatSettingsMutation builder.
func (m *ChatSettingsMutation) Where(ps ...predicate.ChatSettings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatSettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatSettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatSettings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatSettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatSettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatSettings).
func (m *ChatSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatSettingsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.game_change_notification != nil {
		fields = append(fields, chatsettings.FieldGameChangeNotification)
	}
	if m.offline_notification != nil {
		fields = append(fields, chatsettings.FieldOfflineNotification)
	}
	if m.chat_language != nil {
		fields = append(fields, chatsettings.FieldChatLanguage)
	}
	if m.chat != nil {
		fields = append(fields, chatsettings.FieldChatID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		return m.GameChangeNotification()
	case chatsettings.FieldOfflineNotification:
		return m.OfflineNotification()
	case chatsettings.FieldChatLanguage:
		return m.ChatLanguage()
	case chatsettings.FieldChatID:
		return m.ChatID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		return m.OldGameChangeNotification(ctx)
	case chatsettings.FieldOfflineNotification:
		return m.OldOfflineNotification(ctx)
	case chatsettings.FieldChatLanguage:
		return m.OldChatLanguage(ctx)
	case chatsettings.FieldChatID:
		return m.OldChatID(ctx)
	}
	return nil, fmt.Errorf("unknown ChatSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGameChangeNotification(v)
		return nil
	case chatsettings.FieldOfflineNotification:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOfflineNotification(v)
		return nil
	case chatsettings.FieldChatLanguage:
		v, ok := value.(chatsettings.ChatLanguage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatLanguage(v)
		return nil
	case chatsettings.FieldChatID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	}
	return fmt.Errorf("unknown ChatSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatSettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatSettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ChatSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatSettingsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatSettingsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatSettingsMutation) ResetField(name string) error {
	switch name {
	case chatsettings.FieldGameChangeNotification:
		m.ResetGameChangeNotification()
		return nil
	case chatsettings.FieldOfflineNotification:
		m.ResetOfflineNotification()
		return nil
	case chatsettings.FieldChatLanguage:
		m.ResetChatLanguage()
		return nil
	case chatsettings.FieldChatID:
		m.ResetChatID()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chat != nil {
		edges = append(edges, chatsettings.EdgeChat)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatsettings.EdgeChat:
		if id := m.chat; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatSettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchat {
		edges = append(edges, chatsettings.EdgeChat)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case chatsettings.EdgeChat:
		return m.clearedchat
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatSettingsMutation) ClearEdge(name string) error {
	switch name {
	case chatsettings.EdgeChat:
		m.ClearChat()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatSettingsMutation) ResetEdge(name string) error {
	switch name {
	case chatsettings.EdgeChat:
		m.ResetChat()
		return nil
	}
	return fmt.Errorf("unknown ChatSettings edge %s", name)
}

// FollowMutation represents an operation that mutates the Follow nodes in the graph.
type FollowMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	clearedFields  map[string]struct{}
	channel        *uuid.UUID
	clearedchannel bool
	chat           *uuid.UUID
	clearedchat    bool
	done           bool
	oldValue       func(context.Context) (*Follow, error)
	predicates     []predicate.Follow
}

var _ ent.Mutation = (*FollowMutation)(nil)

// followOption allows management of the mutation configuration using functional options.
type followOption func(*FollowMutation)

// newFollowMutation creates new mutation for the Follow entity.
func newFollowMutation(c config, op Op, opts ...followOption) *FollowMutation {
	m := &FollowMutation{
		config:        c,
		op:            op,
		typ:           TypeFollow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFollowID sets the ID field of the mutation.
func withFollowID(id uuid.UUID) followOption {
	return func(m *FollowMutation) {
		var (
			err   error
			once  sync.Once
			value *Follow
		)
		m.oldValue = func(ctx context.Context) (*Follow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Follow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFollow sets the old Follow of the mutation.
func withFollow(node *Follow) followOption {
	return func(m *FollowMutation) {
		m.oldValue = func(context.Context) (*Follow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FollowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FollowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Follow entities.
func (m *FollowMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FollowMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FollowMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Follow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel_id" field.
func (m *FollowMutation) SetChannelID(u uuid.UUID) {
	m.channel = &u
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *FollowMutation) ChannelID() (r uuid.UUID, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Follow entity.
// If the Follow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowMutation) OldChannelID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *FollowMutation) ResetChannelID() {
	m.channel = nil
}

// SetChatID sets the "chat_id" field.
func (m *FollowMutation) SetChatID(u uuid.UUID) {
	m.chat = &u
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *FollowMutation) ChatID() (r uuid.UUID, exists bool) {
	v := m.chat
	if v == nil {
		return
	}
	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Follow entity.
// If the Follow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FollowMutation) OldChatID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}
	return oldValue.ChatID, nil
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *FollowMutation) ResetChatID() {
	m.chat = nil
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *FollowMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *FollowMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *FollowMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *FollowMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// ClearChat clears the "chat" edge to the Chat entity.
func (m *FollowMutation) ClearChat() {
	m.clearedchat = true
}

// ChatCleared reports if the "chat" edge to the Chat entity was cleared.
func (m *FollowMutation) ChatCleared() bool {
	return m.clearedchat
}

// ChatIDs returns the "chat" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChatID instead. It exists only for internal usage by the builders.
func (m *FollowMutation) ChatIDs() (ids []uuid.UUID) {
	if id := m.chat; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChat resets all changes to the "chat" edge.
func (m *FollowMutation) ResetChat() {
	m.chat = nil
	m.clearedchat = false
}

// Where appends a list predicates to the FollowMutation builder.
func (m *FollowMutation) Where(ps ...predicate.Follow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FollowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FollowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Follow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FollowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FollowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Follow).
func (m *FollowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FollowMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.channel != nil {
		fields = append(fields, follow.FieldChannelID)
	}
	if m.chat != nil {
		fields = append(fields, follow.FieldChatID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FollowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case follow.FieldChannelID:
		return m.ChannelID()
	case follow.FieldChatID:
		return m.ChatID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FollowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case follow.FieldChannelID:
		return m.OldChannelID(ctx)
	case follow.FieldChatID:
		return m.OldChatID(ctx)
	}
	return nil, fmt.Errorf("unknown Follow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case follow.FieldChannelID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case follow.FieldChatID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	}
	return fmt.Errorf("unknown Follow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FollowMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FollowMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FollowMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Follow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FollowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FollowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FollowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Follow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FollowMutation) ResetField(name string) error {
	switch name {
	case follow.FieldChannelID:
		m.ResetChannelID()
		return nil
	case follow.FieldChatID:
		m.ResetChatID()
		return nil
	}
	return fmt.Errorf("unknown Follow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FollowMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.channel != nil {
		edges = append(edges, follow.EdgeChannel)
	}
	if m.chat != nil {
		edges = append(edges, follow.EdgeChat)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FollowMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case follow.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case follow.EdgeChat:
		if id := m.chat; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FollowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FollowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FollowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchannel {
		edges = append(edges, follow.EdgeChannel)
	}
	if m.clearedchat {
		edges = append(edges, follow.EdgeChat)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FollowMutation) EdgeCleared(name string) bool {
	switch name {
	case follow.EdgeChannel:
		return m.clearedchannel
	case follow.EdgeChat:
		return m.clearedchat
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FollowMutation) ClearEdge(name string) error {
	switch name {
	case follow.EdgeChannel:
		m.ClearChannel()
		return nil
	case follow.EdgeChat:
		m.ClearChat()
		return nil
	}
	return fmt.Errorf("unknown Follow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FollowMutation) ResetEdge(name string) error {
	switch name {
	case follow.EdgeChannel:
		m.ResetChannel()
		return nil
	case follow.EdgeChat:
		m.ResetChat()
		return nil
	}
	return fmt.Errorf("unknown Follow edge %s", name)
}

// StreamMutation represents an operation that mutates the Stream nodes in the graph.
type StreamMutation struct {
	config
	op               Op
	typ              string
	id               *string
	titles           *[]string
	appendtitles     []string
	categories       *[]string
	appendcategories []string
	started_at       *time.Time
	updated_at       *time.Time
	ended_at         *time.Time
	clearedFields    map[string]struct{}
	channel          *uuid.UUID
	clearedchannel   bool
	done             bool
	oldValue         func(context.Context) (*Stream, error)
	predicates       []predicate.Stream
}

var _ ent.Mutation = (*StreamMutation)(nil)

// streamOption allows management of the mutation configuration using functional options.
type streamOption func(*StreamMutation)

// newStreamMutation creates new mutation for the Stream entity.
func newStreamMutation(c config, op Op, opts ...streamOption) *StreamMutation {
	m := &StreamMutation{
		config:        c,
		op:            op,
		typ:           TypeStream,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStreamID sets the ID field of the mutation.
func withStreamID(id string) streamOption {
	return func(m *StreamMutation) {
		var (
			err   error
			once  sync.Once
			value *Stream
		)
		m.oldValue = func(ctx context.Context) (*Stream, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stream.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStream sets the old Stream of the mutation.
func withStream(node *Stream) streamOption {
	return func(m *StreamMutation) {
		m.oldValue = func(context.Context) (*Stream, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StreamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StreamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Stream entities.
func (m *StreamMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StreamMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StreamMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stream.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChannelID sets the "channel_id" field.
func (m *StreamMutation) SetChannelID(u uuid.UUID) {
	m.channel = &u
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *StreamMutation) ChannelID() (r uuid.UUID, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldChannelID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *StreamMutation) ResetChannelID() {
	m.channel = nil
}

// SetTitles sets the "titles" field.
func (m *StreamMutation) SetTitles(s []string) {
	m.titles = &s
	m.appendtitles = nil
}

// Titles returns the value of the "titles" field in the mutation.
func (m *StreamMutation) Titles() (r []string, exists bool) {
	v := m.titles
	if v == nil {
		return
	}
	return *v, true
}

// OldTitles returns the old "titles" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldTitles(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitles: %w", err)
	}
	return oldValue.Titles, nil
}

// AppendTitles adds s to the "titles" field.
func (m *StreamMutation) AppendTitles(s []string) {
	m.appendtitles = append(m.appendtitles, s...)
}

// AppendedTitles returns the list of values that were appended to the "titles" field in this mutation.
func (m *StreamMutation) AppendedTitles() ([]string, bool) {
	if len(m.appendtitles) == 0 {
		return nil, false
	}
	return m.appendtitles, true
}

// ClearTitles clears the value of the "titles" field.
func (m *StreamMutation) ClearTitles() {
	m.titles = nil
	m.appendtitles = nil
	m.clearedFields[stream.FieldTitles] = struct{}{}
}

// TitlesCleared returns if the "titles" field was cleared in this mutation.
func (m *StreamMutation) TitlesCleared() bool {
	_, ok := m.clearedFields[stream.FieldTitles]
	return ok
}

// ResetTitles resets all changes to the "titles" field.
func (m *StreamMutation) ResetTitles() {
	m.titles = nil
	m.appendtitles = nil
	delete(m.clearedFields, stream.FieldTitles)
}

// SetCategories sets the "categories" field.
func (m *StreamMutation) SetCategories(s []string) {
	m.categories = &s
	m.appendcategories = nil
}

// Categories returns the value of the "categories" field in the mutation.
func (m *StreamMutation) Categories() (r []string, exists bool) {
	v := m.categories
	if v == nil {
		return
	}
	return *v, true
}

// OldCategories returns the old "categories" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldCategories(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategories: %w", err)
	}
	return oldValue.Categories, nil
}

// AppendCategories adds s to the "categories" field.
func (m *StreamMutation) AppendCategories(s []string) {
	m.appendcategories = append(m.appendcategories, s...)
}

// AppendedCategories returns the list of values that were appended to the "categories" field in this mutation.
func (m *StreamMutation) AppendedCategories() ([]string, bool) {
	if len(m.appendcategories) == 0 {
		return nil, false
	}
	return m.appendcategories, true
}

// ClearCategories clears the value of the "categories" field.
func (m *StreamMutation) ClearCategories() {
	m.categories = nil
	m.appendcategories = nil
	m.clearedFields[stream.FieldCategories] = struct{}{}
}

// CategoriesCleared returns if the "categories" field was cleared in this mutation.
func (m *StreamMutation) CategoriesCleared() bool {
	_, ok := m.clearedFields[stream.FieldCategories]
	return ok
}

// ResetCategories resets all changes to the "categories" field.
func (m *StreamMutation) ResetCategories() {
	m.categories = nil
	m.appendcategories = nil
	delete(m.clearedFields, stream.FieldCategories)
}

// SetStartedAt sets the "started_at" field.
func (m *StreamMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *StreamMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *StreamMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[stream.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *StreamMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[stream.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *StreamMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, stream.FieldStartedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StreamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StreamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *StreamMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[stream.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *StreamMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[stream.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StreamMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, stream.FieldUpdatedAt)
}

// SetEndedAt sets the "ended_at" field.
func (m *StreamMutation) SetEndedAt(t time.Time) {
	m.ended_at = &t
}

// EndedAt returns the value of the "ended_at" field in the mutation.
func (m *StreamMutation) EndedAt() (r time.Time, exists bool) {
	v := m.ended_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndedAt returns the old "ended_at" field's value of the Stream entity.
// If the Stream object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StreamMutation) OldEndedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndedAt: %w", err)
	}
	return oldValue.EndedAt, nil
}

// ClearEndedAt clears the value of the "ended_at" field.
func (m *StreamMutation) ClearEndedAt() {
	m.ended_at = nil
	m.clearedFields[stream.FieldEndedAt] = struct{}{}
}

// EndedAtCleared returns if the "ended_at" field was cleared in this mutation.
func (m *StreamMutation) EndedAtCleared() bool {
	_, ok := m.clearedFields[stream.FieldEndedAt]
	return ok
}

// ResetEndedAt resets all changes to the "ended_at" field.
func (m *StreamMutation) ResetEndedAt() {
	m.ended_at = nil
	delete(m.clearedFields, stream.FieldEndedAt)
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *StreamMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *StreamMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *StreamMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *StreamMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// Where appends a list predicates to the StreamMutation builder.
func (m *StreamMutation) Where(ps ...predicate.Stream) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StreamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StreamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Stream, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StreamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StreamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Stream).
func (m *StreamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StreamMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.channel != nil {
		fields = append(fields, stream.FieldChannelID)
	}
	if m.titles != nil {
		fields = append(fields, stream.FieldTitles)
	}
	if m.categories != nil {
		fields = append(fields, stream.FieldCategories)
	}
	if m.started_at != nil {
		fields = append(fields, stream.FieldStartedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, stream.FieldUpdatedAt)
	}
	if m.ended_at != nil {
		fields = append(fields, stream.FieldEndedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StreamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stream.FieldChannelID:
		return m.ChannelID()
	case stream.FieldTitles:
		return m.Titles()
	case stream.FieldCategories:
		return m.Categories()
	case stream.FieldStartedAt:
		return m.StartedAt()
	case stream.FieldUpdatedAt:
		return m.UpdatedAt()
	case stream.FieldEndedAt:
		return m.EndedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StreamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stream.FieldChannelID:
		return m.OldChannelID(ctx)
	case stream.FieldTitles:
		return m.OldTitles(ctx)
	case stream.FieldCategories:
		return m.OldCategories(ctx)
	case stream.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case stream.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case stream.FieldEndedAt:
		return m.OldEndedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Stream field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StreamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stream.FieldChannelID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case stream.FieldTitles:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitles(v)
		return nil
	case stream.FieldCategories:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategories(v)
		return nil
	case stream.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case stream.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case stream.FieldEndedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Stream field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StreamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StreamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StreamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Stream numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StreamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(stream.FieldTitles) {
		fields = append(fields, stream.FieldTitles)
	}
	if m.FieldCleared(stream.FieldCategories) {
		fields = append(fields, stream.FieldCategories)
	}
	if m.FieldCleared(stream.FieldStartedAt) {
		fields = append(fields, stream.FieldStartedAt)
	}
	if m.FieldCleared(stream.FieldUpdatedAt) {
		fields = append(fields, stream.FieldUpdatedAt)
	}
	if m.FieldCleared(stream.FieldEndedAt) {
		fields = append(fields, stream.FieldEndedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StreamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StreamMutation) ClearField(name string) error {
	switch name {
	case stream.FieldTitles:
		m.ClearTitles()
		return nil
	case stream.FieldCategories:
		m.ClearCategories()
		return nil
	case stream.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	case stream.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case stream.FieldEndedAt:
		m.ClearEndedAt()
		return nil
	}
	return fmt.Errorf("unknown Stream nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StreamMutation) ResetField(name string) error {
	switch name {
	case stream.FieldChannelID:
		m.ResetChannelID()
		return nil
	case stream.FieldTitles:
		m.ResetTitles()
		return nil
	case stream.FieldCategories:
		m.ResetCategories()
		return nil
	case stream.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case stream.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case stream.FieldEndedAt:
		m.ResetEndedAt()
		return nil
	}
	return fmt.Errorf("unknown Stream field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StreamMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.channel != nil {
		edges = append(edges, stream.EdgeChannel)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StreamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stream.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StreamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StreamMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StreamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchannel {
		edges = append(edges, stream.EdgeChannel)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StreamMutation) EdgeCleared(name string) bool {
	switch name {
	case stream.EdgeChannel:
		return m.clearedchannel
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StreamMutation) ClearEdge(name string) error {
	switch name {
	case stream.EdgeChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown Stream unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StreamMutation) ResetEdge(name string) error {
	switch name {
	case stream.EdgeChannel:
		m.ResetChannel()
		return nil
	}
	return fmt.Errorf("unknown Stream edge %s", name)
}
