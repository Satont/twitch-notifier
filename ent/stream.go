// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
	"github.com/satont/twitch-notifier/ent/stream"
)

// Stream is the model entity for the Stream schema.
type Stream struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID uuid.UUID `json:"channel_id,omitempty"`
	// Titles holds the value of the "titles" field.
	Titles []string `json:"titles,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories []string `json:"categories,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt *time.Time `json:"ended_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StreamQuery when eager-loading is set.
	Edges StreamEdges `json:"edges"`
}

// StreamEdges holds the relations/edges for other nodes in the graph.
type StreamEdges struct {
	// Channel holds the value of the channel edge.
	Channel *Channel `json:"channel,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChannelOrErr returns the Channel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StreamEdges) ChannelOrErr() (*Channel, error) {
	if e.loadedTypes[0] {
		if e.Channel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: channel.Label}
		}
		return e.Channel, nil
	}
	return nil, &NotLoadedError{edge: "channel"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stream) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stream.FieldTitles, stream.FieldCategories:
			values[i] = new([]byte)
		case stream.FieldID:
			values[i] = new(sql.NullString)
		case stream.FieldStartedAt, stream.FieldUpdatedAt, stream.FieldEndedAt:
			values[i] = new(sql.NullTime)
		case stream.FieldChannelID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stream", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stream fields.
func (s *Stream) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stream.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case stream.FieldChannelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value != nil {
				s.ChannelID = *value
			}
		case stream.FieldTitles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field titles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Titles); err != nil {
					return fmt.Errorf("unmarshal field titles: %w", err)
				}
			}
		case stream.FieldCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Categories); err != nil {
					return fmt.Errorf("unmarshal field categories: %w", err)
				}
			}
		case stream.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case stream.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = new(time.Time)
				*s.UpdatedAt = value.Time
			}
		case stream.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = new(time.Time)
				*s.EndedAt = value.Time
			}
		}
	}
	return nil
}

// QueryChannel queries the "channel" edge of the Stream entity.
func (s *Stream) QueryChannel() *ChannelQuery {
	return NewStreamClient(s.config).QueryChannel(s)
}

// Update returns a builder for updating this Stream.
// Note that you need to call Stream.Unwrap() before calling this method if this Stream
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stream) Update() *StreamUpdateOne {
	return NewStreamClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stream entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stream) Unwrap() *Stream {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stream is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stream) String() string {
	var builder strings.Builder
	builder.WriteString("Stream(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ChannelID))
	builder.WriteString(", ")
	builder.WriteString("titles=")
	builder.WriteString(fmt.Sprintf("%v", s.Titles))
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(fmt.Sprintf("%v", s.Categories))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.EndedAt; v != nil {
		builder.WriteString("ended_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Streams is a parsable slice of Stream.
type Streams []*Stream
