// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/chat"
	"github.com/satont/twitch-notifier/ent/chatsettings"
)

// ChatSettingsCreate is the builder for creating a ChatSettings entity.
type ChatSettingsCreate struct {
	config
	mutation *ChatSettingsMutation
	hooks    []Hook
}

// SetGameChangeNotification sets the "game_change_notification" field.
func (csc *ChatSettingsCreate) SetGameChangeNotification(b bool) *ChatSettingsCreate {
	csc.mutation.SetGameChangeNotification(b)
	return csc
}

// SetNillableGameChangeNotification sets the "game_change_notification" field if the given value is not nil.
func (csc *ChatSettingsCreate) SetNillableGameChangeNotification(b *bool) *ChatSettingsCreate {
	if b != nil {
		csc.SetGameChangeNotification(*b)
	}
	return csc
}

// SetOfflineNotification sets the "offline_notification" field.
func (csc *ChatSettingsCreate) SetOfflineNotification(b bool) *ChatSettingsCreate {
	csc.mutation.SetOfflineNotification(b)
	return csc
}

// SetNillableOfflineNotification sets the "offline_notification" field if the given value is not nil.
func (csc *ChatSettingsCreate) SetNillableOfflineNotification(b *bool) *ChatSettingsCreate {
	if b != nil {
		csc.SetOfflineNotification(*b)
	}
	return csc
}

// SetChatLanguage sets the "chat_language" field.
func (csc *ChatSettingsCreate) SetChatLanguage(cl chatsettings.ChatLanguage) *ChatSettingsCreate {
	csc.mutation.SetChatLanguage(cl)
	return csc
}

// SetNillableChatLanguage sets the "chat_language" field if the given value is not nil.
func (csc *ChatSettingsCreate) SetNillableChatLanguage(cl *chatsettings.ChatLanguage) *ChatSettingsCreate {
	if cl != nil {
		csc.SetChatLanguage(*cl)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *ChatSettingsCreate) SetID(u uuid.UUID) *ChatSettingsCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ChatSettingsCreate) SetNillableID(u *uuid.UUID) *ChatSettingsCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// SetOwnerID sets the "owner" edge to the Chat entity by ID.
func (csc *ChatSettingsCreate) SetOwnerID(id uuid.UUID) *ChatSettingsCreate {
	csc.mutation.SetOwnerID(id)
	return csc
}

// SetNillableOwnerID sets the "owner" edge to the Chat entity by ID if the given value is not nil.
func (csc *ChatSettingsCreate) SetNillableOwnerID(id *uuid.UUID) *ChatSettingsCreate {
	if id != nil {
		csc = csc.SetOwnerID(*id)
	}
	return csc
}

// SetOwner sets the "owner" edge to the Chat entity.
func (csc *ChatSettingsCreate) SetOwner(c *Chat) *ChatSettingsCreate {
	return csc.SetOwnerID(c.ID)
}

// Mutation returns the ChatSettingsMutation object of the builder.
func (csc *ChatSettingsCreate) Mutation() *ChatSettingsMutation {
	return csc.mutation
}

// Save creates the ChatSettings in the database.
func (csc *ChatSettingsCreate) Save(ctx context.Context) (*ChatSettings, error) {
	csc.defaults()
	return withHooks[*ChatSettings, ChatSettingsMutation](ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ChatSettingsCreate) SaveX(ctx context.Context) *ChatSettings {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ChatSettingsCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ChatSettingsCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ChatSettingsCreate) defaults() {
	if _, ok := csc.mutation.GameChangeNotification(); !ok {
		v := chatsettings.DefaultGameChangeNotification
		csc.mutation.SetGameChangeNotification(v)
	}
	if _, ok := csc.mutation.OfflineNotification(); !ok {
		v := chatsettings.DefaultOfflineNotification
		csc.mutation.SetOfflineNotification(v)
	}
	if _, ok := csc.mutation.ChatLanguage(); !ok {
		v := chatsettings.DefaultChatLanguage
		csc.mutation.SetChatLanguage(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		v := chatsettings.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ChatSettingsCreate) check() error {
	if _, ok := csc.mutation.GameChangeNotification(); !ok {
		return &ValidationError{Name: "game_change_notification", err: errors.New(`ent: missing required field "ChatSettings.game_change_notification"`)}
	}
	if _, ok := csc.mutation.OfflineNotification(); !ok {
		return &ValidationError{Name: "offline_notification", err: errors.New(`ent: missing required field "ChatSettings.offline_notification"`)}
	}
	if _, ok := csc.mutation.ChatLanguage(); !ok {
		return &ValidationError{Name: "chat_language", err: errors.New(`ent: missing required field "ChatSettings.chat_language"`)}
	}
	if v, ok := csc.mutation.ChatLanguage(); ok {
		if err := chatsettings.ChatLanguageValidator(v); err != nil {
			return &ValidationError{Name: "chat_language", err: fmt.Errorf(`ent: validator failed for field "ChatSettings.chat_language": %w`, err)}
		}
	}
	return nil
}

func (csc *ChatSettingsCreate) sqlSave(ctx context.Context) (*ChatSettings, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ChatSettingsCreate) createSpec() (*ChatSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatSettings{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(chatsettings.Table, sqlgraph.NewFieldSpec(chatsettings.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.GameChangeNotification(); ok {
		_spec.SetField(chatsettings.FieldGameChangeNotification, field.TypeBool, value)
		_node.GameChangeNotification = value
	}
	if value, ok := csc.mutation.OfflineNotification(); ok {
		_spec.SetField(chatsettings.FieldOfflineNotification, field.TypeBool, value)
		_node.OfflineNotification = value
	}
	if value, ok := csc.mutation.ChatLanguage(); ok {
		_spec.SetField(chatsettings.FieldChatLanguage, field.TypeEnum, value)
		_node.ChatLanguage = value
	}
	if nodes := csc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chatsettings.OwnerTable,
			Columns: []string{chatsettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chat_chat_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChatSettingsCreateBulk is the builder for creating many ChatSettings entities in bulk.
type ChatSettingsCreateBulk struct {
	config
	builders []*ChatSettingsCreate
}

// Save creates the ChatSettings entities in the database.
func (cscb *ChatSettingsCreateBulk) Save(ctx context.Context) ([]*ChatSettings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ChatSettings, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ChatSettingsCreateBulk) SaveX(ctx context.Context) []*ChatSettings {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ChatSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ChatSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
