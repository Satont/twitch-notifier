// Code generated by ent, DO NOT EDIT.

package chat

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the chat type in the database.
	Label = "chat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChatID holds the string denoting the chat_id field in the database.
	FieldChatID = "chat_id"
	// FieldService holds the string denoting the service field in the database.
	FieldService = "service"
	// EdgeChatSettings holds the string denoting the chat_settings edge name in mutations.
	EdgeChatSettings = "chat_settings"
	// EdgeFollows holds the string denoting the follows edge name in mutations.
	EdgeFollows = "follows"
	// Table holds the table name of the chat in the database.
	Table = "chats"
	// ChatSettingsTable is the table that holds the chat_settings relation/edge.
	ChatSettingsTable = "chat_settings"
	// ChatSettingsInverseTable is the table name for the ChatSettings entity.
	// It exists in this package in order to avoid circular dependency with the "chatsettings" package.
	ChatSettingsInverseTable = "chat_settings"
	// ChatSettingsColumn is the table column denoting the chat_settings relation/edge.
	ChatSettingsColumn = "chat_chat_settings"
	// FollowsTable is the table that holds the follows relation/edge.
	FollowsTable = "follows"
	// FollowsInverseTable is the table name for the Follow entity.
	// It exists in this package in order to avoid circular dependency with the "follow" package.
	FollowsInverseTable = "follows"
	// FollowsColumn is the table column denoting the follows relation/edge.
	FollowsColumn = "chat_follows"
)

// Columns holds all SQL columns for chat fields.
var Columns = []string{
	FieldID,
	FieldChatID,
	FieldService,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Service defines the type for the "service" enum field.
type Service string

// Service values.
const (
	ServiceTelegram Service = "telegram"
)

func (s Service) String() string {
	return string(s)
}

// ServiceValidator is a validator for the "service" field enum values. It is called by the builders before save.
func ServiceValidator(s Service) error {
	switch s {
	case ServiceTelegram:
		return nil
	default:
		return fmt.Errorf("chat: invalid enum value for service field: %q", s)
	}
}
