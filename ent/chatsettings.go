// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/chat"
	"github.com/satont/twitch-notifier/ent/chatsettings"
)

// ChatSettings is the model entity for the ChatSettings schema.
type ChatSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GameChangeNotification holds the value of the "game_change_notification" field.
	GameChangeNotification bool `json:"game_change_notification,omitempty"`
	// OfflineNotification holds the value of the "offline_notification" field.
	OfflineNotification bool `json:"offline_notification,omitempty"`
	// ChatLanguage holds the value of the "chat_language" field.
	ChatLanguage chatsettings.ChatLanguage `json:"chat_language,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID uuid.UUID `json:"chat_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatSettingsQuery when eager-loading is set.
	Edges ChatSettingsEdges `json:"edges"`
}

// ChatSettingsEdges holds the relations/edges for other nodes in the graph.
type ChatSettingsEdges struct {
	// Chat holds the value of the chat edge.
	Chat *Chat `json:"chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatSettingsEdges) ChatOrErr() (*Chat, error) {
	if e.loadedTypes[0] {
		if e.Chat == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.Chat, nil
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatsettings.FieldGameChangeNotification, chatsettings.FieldOfflineNotification:
			values[i] = new(sql.NullBool)
		case chatsettings.FieldChatLanguage:
			values[i] = new(sql.NullString)
		case chatsettings.FieldID, chatsettings.FieldChatID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ChatSettings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatSettings fields.
func (cs *ChatSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatsettings.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case chatsettings.FieldGameChangeNotification:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field game_change_notification", values[i])
			} else if value.Valid {
				cs.GameChangeNotification = value.Bool
			}
		case chatsettings.FieldOfflineNotification:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field offline_notification", values[i])
			} else if value.Valid {
				cs.OfflineNotification = value.Bool
			}
		case chatsettings.FieldChatLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_language", values[i])
			} else if value.Valid {
				cs.ChatLanguage = chatsettings.ChatLanguage(value.String)
			}
		case chatsettings.FieldChatID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value != nil {
				cs.ChatID = *value
			}
		}
	}
	return nil
}

// QueryChat queries the "chat" edge of the ChatSettings entity.
func (cs *ChatSettings) QueryChat() *ChatQuery {
	return NewChatSettingsClient(cs.config).QueryChat(cs)
}

// Update returns a builder for updating this ChatSettings.
// Note that you need to call ChatSettings.Unwrap() before calling this method if this ChatSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ChatSettings) Update() *ChatSettingsUpdateOne {
	return NewChatSettingsClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ChatSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ChatSettings) Unwrap() *ChatSettings {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatSettings is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ChatSettings) String() string {
	var builder strings.Builder
	builder.WriteString("ChatSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("game_change_notification=")
	builder.WriteString(fmt.Sprintf("%v", cs.GameChangeNotification))
	builder.WriteString(", ")
	builder.WriteString("offline_notification=")
	builder.WriteString(fmt.Sprintf("%v", cs.OfflineNotification))
	builder.WriteString(", ")
	builder.WriteString("chat_language=")
	builder.WriteString(fmt.Sprintf("%v", cs.ChatLanguage))
	builder.WriteString(", ")
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.ChatID))
	builder.WriteByte(')')
	return builder.String()
}

// ChatSettingsSlice is a parsable slice of ChatSettings.
type ChatSettingsSlice []*ChatSettings
