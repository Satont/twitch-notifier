// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/satont/twitch-notifier/ent/channel"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
	// Service holds the value of the "service" field.
	Service channel.Service `json:"service,omitempty"`
	// IsLive holds the value of the "is_live" field.
	IsLive bool `json:"is_live,omitempty"`
	// Title holds the value of the "title" field.
	Title *string `json:"title,omitempty"`
	// Category holds the value of the "category" field.
	Category *string `json:"category,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges ChannelEdges `json:"edges"`
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Follows holds the value of the follows edge.
	Follows []*Follow `json:"follows,omitempty"`
	// Streams holds the value of the streams edge.
	Streams []*Stream `json:"streams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FollowsOrErr returns the Follows value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) FollowsOrErr() ([]*Follow, error) {
	if e.loadedTypes[0] {
		return e.Follows, nil
	}
	return nil, &NotLoadedError{edge: "follows"}
}

// StreamsOrErr returns the Streams value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) StreamsOrErr() ([]*Stream, error) {
	if e.loadedTypes[1] {
		return e.Streams, nil
	}
	return nil, &NotLoadedError{edge: "streams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldIsLive:
			values[i] = new(sql.NullBool)
		case channel.FieldChannelID, channel.FieldService, channel.FieldTitle, channel.FieldCategory:
			values[i] = new(sql.NullString)
		case channel.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case channel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Channel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (c *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case channel.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				c.ChannelID = value.String
			}
		case channel.FieldService:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field service", values[i])
			} else if value.Valid {
				c.Service = channel.Service(value.String)
			}
		case channel.FieldIsLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_live", values[i])
			} else if value.Valid {
				c.IsLive = value.Bool
			}
		case channel.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = new(string)
				*c.Title = value.String
			}
		case channel.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				c.Category = new(string)
				*c.Category = value.String
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = new(time.Time)
				*c.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryFollows queries the "follows" edge of the Channel entity.
func (c *Channel) QueryFollows() *FollowQuery {
	return NewChannelClient(c.config).QueryFollows(c)
}

// QueryStreams queries the "streams" edge of the Channel entity.
func (c *Channel) QueryStreams() *StreamQuery {
	return NewChannelClient(c.config).QueryStreams(c)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Channel) Unwrap() *Channel {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("channel_id=")
	builder.WriteString(c.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("service=")
	builder.WriteString(fmt.Sprintf("%v", c.Service))
	builder.WriteString(", ")
	builder.WriteString("is_live=")
	builder.WriteString(fmt.Sprintf("%v", c.IsLive))
	builder.WriteString(", ")
	if v := c.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Category; v != nil {
		builder.WriteString("category=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel
