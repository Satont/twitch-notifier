// Code generated by MockGen. DO NOT EDIT.
// Source: thumbnail_checker.go
//
// Generated by this command:
//
//	mockgen -source=thumbnail_checker.go -destination=mocks/mock.go
//

// Package mock_thumbnailchecker is a generated GoMock package.
package mock_thumbnailchecker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockThumbnailChecker is a mock of ThumbnailChecker interface.
type MockThumbnailChecker struct {
	ctrl     *gomock.Controller
	recorder *MockThumbnailCheckerMockRecorder
}

// MockThumbnailCheckerMockRecorder is the mock recorder for MockThumbnailChecker.
type MockThumbnailCheckerMockRecorder struct {
	mock *MockThumbnailChecker
}

// NewMockThumbnailChecker creates a new mock instance.
func NewMockThumbnailChecker(ctrl *gomock.Controller) *MockThumbnailChecker {
	mock := &MockThumbnailChecker{ctrl: ctrl}
	mock.recorder = &MockThumbnailCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThumbnailChecker) EXPECT() *MockThumbnailCheckerMockRecorder {
	return m.recorder
}

// TransformSizes mocks base method.
func (m *MockThumbnailChecker) TransformSizes(url string, width, height int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransformSizes", url, width, height)
	ret0, _ := ret[0].(string)
	return ret0
}

// TransformSizes indicates an expected call of TransformSizes.
func (mr *MockThumbnailCheckerMockRecorder) TransformSizes(url, width, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransformSizes", reflect.TypeOf((*MockThumbnailChecker)(nil).TransformSizes), url, width, height)
}

// ValidateThumbnail mocks base method.
func (m *MockThumbnailChecker) ValidateThumbnail(ctx context.Context, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateThumbnail", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateThumbnail indicates an expected call of ValidateThumbnail.
func (mr *MockThumbnailCheckerMockRecorder) ValidateThumbnail(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateThumbnail", reflect.TypeOf((*MockThumbnailChecker)(nil).ValidateThumbnail), ctx, url)
}
