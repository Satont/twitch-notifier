// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go
//
// Generated by this command:
//
//	mockgen -source=channel.go -destination=mocks/mock.go
//

// Package mock_channel is a generated GoMock package.
package mock_channel

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/satont/twitch-notifier/internal/domain"
	channel "github.com/satont/twitch-notifier/internal/repository/channel"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, channel domain.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, channel)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(ctx context.Context) ([]domain.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]domain.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), ctx, id)
}

// GetByStreamServiceAndID mocks base method.
func (m *MockRepository) GetByStreamServiceAndID(ctx context.Context, service channel.StreamingService, id string) (*domain.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStreamServiceAndID", ctx, service, id)
	ret0, _ := ret[0].(*domain.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStreamServiceAndID indicates an expected call of GetByStreamServiceAndID.
func (mr *MockRepositoryMockRecorder) GetByStreamServiceAndID(ctx, service, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStreamServiceAndID", reflect.TypeOf((*MockRepository)(nil).GetByStreamServiceAndID), ctx, service, id)
}
