// Code generated by MockGen. DO NOT EDIT.
// Source: announce_sender.go
//
// Generated by this command:
//
//	mockgen -source=announce_sender.go -destination=mocks/mock.go
//

// Package mock_announcesender is a generated GoMock package.
package mock_announcesender

import (
	context "context"
	reflect "reflect"

	announcesender "github.com/satont/twitch-notifier/internal/announcesender"
	gomock "go.uber.org/mock/gomock"
)

// MockAnnounceSender is a mock of AnnounceSender interface.
type MockAnnounceSender struct {
	ctrl     *gomock.Controller
	recorder *MockAnnounceSenderMockRecorder
}

// MockAnnounceSenderMockRecorder is the mock recorder for MockAnnounceSender.
type MockAnnounceSenderMockRecorder struct {
	mock *MockAnnounceSender
}

// NewMockAnnounceSender creates a new mock instance.
func NewMockAnnounceSender(ctrl *gomock.Controller) *MockAnnounceSender {
	mock := &MockAnnounceSender{ctrl: ctrl}
	mock.recorder = &MockAnnounceSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnnounceSender) EXPECT() *MockAnnounceSenderMockRecorder {
	return m.recorder
}

// SendCategoryChange mocks base method.
func (m *MockAnnounceSender) SendCategoryChange(ctx context.Context, opts announcesender.ChannelCategoryChangeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCategoryChange", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCategoryChange indicates an expected call of SendCategoryChange.
func (mr *MockAnnounceSenderMockRecorder) SendCategoryChange(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCategoryChange", reflect.TypeOf((*MockAnnounceSender)(nil).SendCategoryChange), ctx, opts)
}

// SendOffline mocks base method.
func (m *MockAnnounceSender) SendOffline(ctx context.Context, opts announcesender.ChannelOfflineOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOffline", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOffline indicates an expected call of SendOffline.
func (mr *MockAnnounceSenderMockRecorder) SendOffline(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOffline", reflect.TypeOf((*MockAnnounceSender)(nil).SendOffline), ctx, opts)
}

// SendOnline mocks base method.
func (m *MockAnnounceSender) SendOnline(ctx context.Context, opts announcesender.ChannelOnlineOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOnline", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOnline indicates an expected call of SendOnline.
func (mr *MockAnnounceSenderMockRecorder) SendOnline(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOnline", reflect.TypeOf((*MockAnnounceSender)(nil).SendOnline), ctx, opts)
}

// SendTitleAndCategoryChange mocks base method.
func (m *MockAnnounceSender) SendTitleAndCategoryChange(ctx context.Context, opts announcesender.ChannelTitleAndCategoryChangeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTitleAndCategoryChange", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTitleAndCategoryChange indicates an expected call of SendTitleAndCategoryChange.
func (mr *MockAnnounceSenderMockRecorder) SendTitleAndCategoryChange(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTitleAndCategoryChange", reflect.TypeOf((*MockAnnounceSender)(nil).SendTitleAndCategoryChange), ctx, opts)
}

// SendTitleChange mocks base method.
func (m *MockAnnounceSender) SendTitleChange(ctx context.Context, opts announcesender.ChannelTitleChangeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTitleChange", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTitleChange indicates an expected call of SendTitleChange.
func (mr *MockAnnounceSenderMockRecorder) SendTitleChange(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTitleChange", reflect.TypeOf((*MockAnnounceSender)(nil).SendTitleChange), ctx, opts)
}
