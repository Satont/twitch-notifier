// Code generated by MockGen. DO NOT EDIT.
// Source: localizer.go
//
// Generated by this command:
//
//	mockgen -source=localizer.go -destination=mocks/mock.go
//

// Package mock_localizer is a generated GoMock package.
package mock_localizer

import (
	reflect "reflect"

	localizer "github.com/satont/twitch-notifier/internal/i18n/localizer"
	gomock "go.uber.org/mock/gomock"
)

// MockLocalizer is a mock of Localizer interface.
type MockLocalizer struct {
	ctrl     *gomock.Controller
	recorder *MockLocalizerMockRecorder
}

// MockLocalizerMockRecorder is the mock recorder for MockLocalizer.
type MockLocalizerMockRecorder struct {
	mock *MockLocalizer
}

// NewMockLocalizer creates a new mock instance.
func NewMockLocalizer(ctrl *gomock.Controller) *MockLocalizer {
	mock := &MockLocalizer{ctrl: ctrl}
	mock.recorder = &MockLocalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalizer) EXPECT() *MockLocalizerMockRecorder {
	return m.recorder
}

// Localize mocks base method.
func (m *MockLocalizer) Localize(opts ...localizer.Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Localize", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Localize indicates an expected call of Localize.
func (mr *MockLocalizerMockRecorder) Localize(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Localize", reflect.TypeOf((*MockLocalizer)(nil).Localize), opts...)
}

// MustLocalize mocks base method.
func (m *MockLocalizer) MustLocalize(opts ...localizer.Option) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustLocalize", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// MustLocalize indicates an expected call of MustLocalize.
func (mr *MockLocalizerMockRecorder) MustLocalize(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustLocalize", reflect.TypeOf((*MockLocalizer)(nil).MustLocalize), opts...)
}

// MockOption is a mock of Option interface.
type MockOption struct {
	ctrl     *gomock.Controller
	recorder *MockOptionMockRecorder
}

// MockOptionMockRecorder is the mock recorder for MockOption.
type MockOptionMockRecorder struct {
	mock *MockOption
}

// NewMockOption creates a new mock instance.
func NewMockOption(ctrl *gomock.Controller) *MockOption {
	mock := &MockOption{ctrl: ctrl}
	mock.recorder = &MockOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOption) EXPECT() *MockOptionMockRecorder {
	return m.recorder
}

// apply mocks base method.
func (m *MockOption) apply(options *localizer.Options) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "apply", options)
}

// apply indicates an expected call of apply.
func (mr *MockOptionMockRecorder) apply(options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockOption)(nil).apply), options)
}
