// Code generated by MockGen. DO NOT EDIT.
// Source: message_sender.go
//
// Generated by this command:
//
//	mockgen -source=message_sender.go -destination=mocks/mock.go
//

// Package mock_messagesender is a generated GoMock package.
package mock_messagesender

import (
	context "context"
	reflect "reflect"

	messagesender "github.com/satont/twitch-notifier/internal/messagesender"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessageTelegram mocks base method.
func (m *MockMessageSender) SendMessageTelegram(ctx context.Context, opts messagesender.TelegramOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageTelegram", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageTelegram indicates an expected call of SendMessageTelegram.
func (mr *MockMessageSenderMockRecorder) SendMessageTelegram(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageTelegram", reflect.TypeOf((*MockMessageSender)(nil).SendMessageTelegram), ctx, opts)
}
